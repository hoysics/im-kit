// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: api/comet/comet.proto

package comet

import (
	context "context"
	protocol "github.com/hoysics/im-kit/api/protocol"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CometClient is the client API for Comet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CometClient interface {
	Mail(ctx context.Context, opts ...grpc.CallOption) (Comet_MailClient, error)
}

type cometClient struct {
	cc grpc.ClientConnInterface
}

func NewCometClient(cc grpc.ClientConnInterface) CometClient {
	return &cometClient{cc}
}

func (c *cometClient) Mail(ctx context.Context, opts ...grpc.CallOption) (Comet_MailClient, error) {
	stream, err := c.cc.NewStream(ctx, &Comet_ServiceDesc.Streams[0], "/im.comet.Comet/Mail", opts...)
	if err != nil {
		return nil, err
	}
	x := &cometMailClient{stream}
	return x, nil
}

type Comet_MailClient interface {
	Send(*protocol.Major) error
	Recv() (*protocol.Major, error)
	grpc.ClientStream
}

type cometMailClient struct {
	grpc.ClientStream
}

func (x *cometMailClient) Send(m *protocol.Major) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cometMailClient) Recv() (*protocol.Major, error) {
	m := new(protocol.Major)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CometServer is the server API for Comet service.
// All implementations must embed UnimplementedCometServer
// for forward compatibility
type CometServer interface {
	Mail(Comet_MailServer) error
	mustEmbedUnimplementedCometServer()
}

// UnimplementedCometServer must be embedded to have forward compatible implementations.
type UnimplementedCometServer struct {
}

func (UnimplementedCometServer) Mail(Comet_MailServer) error {
	return status.Errorf(codes.Unimplemented, "method Mail not implemented")
}
func (UnimplementedCometServer) mustEmbedUnimplementedCometServer() {}

// UnsafeCometServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CometServer will
// result in compilation errors.
type UnsafeCometServer interface {
	mustEmbedUnimplementedCometServer()
}

func RegisterCometServer(s grpc.ServiceRegistrar, srv CometServer) {
	s.RegisterService(&Comet_ServiceDesc, srv)
}

func _Comet_Mail_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CometServer).Mail(&cometMailServer{stream})
}

type Comet_MailServer interface {
	Send(*protocol.Major) error
	Recv() (*protocol.Major, error)
	grpc.ServerStream
}

type cometMailServer struct {
	grpc.ServerStream
}

func (x *cometMailServer) Send(m *protocol.Major) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cometMailServer) Recv() (*protocol.Major, error) {
	m := new(protocol.Major)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Comet_ServiceDesc is the grpc.ServiceDesc for Comet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Comet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "im.comet.Comet",
	HandlerType: (*CometServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Mail",
			Handler:       _Comet_Mail_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/comet/comet.proto",
}

// BrokerClient is the client API for Broker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrokerClient interface {
	PushMsg(ctx context.Context, in *PushMsgRequest, opts ...grpc.CallOption) (*PushMsgReply, error)
	Broadcast(ctx context.Context, in *BroadcastRequest, opts ...grpc.CallOption) (*BroadcastReply, error)
	BroadcastInRoom(ctx context.Context, in *BroadcastInRoomRequest, opts ...grpc.CallOption) (*BroadcastInRoomReply, error)
}

type brokerClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokerClient(cc grpc.ClientConnInterface) BrokerClient {
	return &brokerClient{cc}
}

func (c *brokerClient) PushMsg(ctx context.Context, in *PushMsgRequest, opts ...grpc.CallOption) (*PushMsgReply, error) {
	out := new(PushMsgReply)
	err := c.cc.Invoke(ctx, "/im.comet.Broker/PushMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) Broadcast(ctx context.Context, in *BroadcastRequest, opts ...grpc.CallOption) (*BroadcastReply, error) {
	out := new(BroadcastReply)
	err := c.cc.Invoke(ctx, "/im.comet.Broker/Broadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) BroadcastInRoom(ctx context.Context, in *BroadcastInRoomRequest, opts ...grpc.CallOption) (*BroadcastInRoomReply, error) {
	out := new(BroadcastInRoomReply)
	err := c.cc.Invoke(ctx, "/im.comet.Broker/BroadcastInRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrokerServer is the server API for Broker service.
// All implementations must embed UnimplementedBrokerServer
// for forward compatibility
type BrokerServer interface {
	PushMsg(context.Context, *PushMsgRequest) (*PushMsgReply, error)
	Broadcast(context.Context, *BroadcastRequest) (*BroadcastReply, error)
	BroadcastInRoom(context.Context, *BroadcastInRoomRequest) (*BroadcastInRoomReply, error)
	mustEmbedUnimplementedBrokerServer()
}

// UnimplementedBrokerServer must be embedded to have forward compatible implementations.
type UnimplementedBrokerServer struct {
}

func (UnimplementedBrokerServer) PushMsg(context.Context, *PushMsgRequest) (*PushMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushMsg not implemented")
}
func (UnimplementedBrokerServer) Broadcast(context.Context, *BroadcastRequest) (*BroadcastReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedBrokerServer) BroadcastInRoom(context.Context, *BroadcastInRoomRequest) (*BroadcastInRoomReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastInRoom not implemented")
}
func (UnimplementedBrokerServer) mustEmbedUnimplementedBrokerServer() {}

// UnsafeBrokerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrokerServer will
// result in compilation errors.
type UnsafeBrokerServer interface {
	mustEmbedUnimplementedBrokerServer()
}

func RegisterBrokerServer(s grpc.ServiceRegistrar, srv BrokerServer) {
	s.RegisterService(&Broker_ServiceDesc, srv)
}

func _Broker_PushMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).PushMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.comet.Broker/PushMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).PushMsg(ctx, req.(*PushMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.comet.Broker/Broadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).Broadcast(ctx, req.(*BroadcastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_BroadcastInRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastInRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).BroadcastInRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/im.comet.Broker/BroadcastInRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).BroadcastInRoom(ctx, req.(*BroadcastInRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Broker_ServiceDesc is the grpc.ServiceDesc for Broker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Broker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "im.comet.Broker",
	HandlerType: (*BrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushMsg",
			Handler:    _Broker_PushMsg_Handler,
		},
		{
			MethodName: "Broadcast",
			Handler:    _Broker_Broadcast_Handler,
		},
		{
			MethodName: "BroadcastInRoom",
			Handler:    _Broker_BroadcastInRoom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/comet/comet.proto",
}
