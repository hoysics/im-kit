// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.0
// - protoc             v3.21.5
// source: api/logic/logic.proto

package logic

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationLogicBroadcast = "/im.logic.Logic/Broadcast"
const OperationLogicBroadcastInRoom = "/im.logic.Logic/BroadcastInRoom"
const OperationLogicPushMsg = "/im.logic.Logic/PushMsg"

type LogicHTTPServer interface {
	Broadcast(context.Context, *BroadcastReq) (*BroadcastReply, error)
	BroadcastInRoom(context.Context, *BroadcastInRoomReq) (*BroadcastInRoomReply, error)
	PushMsg(context.Context, *PushMsgReq) (*PushMsgReply, error)
}

func RegisterLogicHTTPServer(s *http.Server, srv LogicHTTPServer) {
	r := s.Route("/")
	r.POST("/msg/clients", _Logic_PushMsg0_HTTP_Handler(srv))
	r.POST("/msg/all", _Logic_Broadcast0_HTTP_Handler(srv))
	r.POST("/msg/room", _Logic_BroadcastInRoom0_HTTP_Handler(srv))
}

func _Logic_PushMsg0_HTTP_Handler(srv LogicHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PushMsgReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLogicPushMsg)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PushMsg(ctx, req.(*PushMsgReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PushMsgReply)
		return ctx.Result(200, reply)
	}
}

func _Logic_Broadcast0_HTTP_Handler(srv LogicHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BroadcastReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLogicBroadcast)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Broadcast(ctx, req.(*BroadcastReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BroadcastReply)
		return ctx.Result(200, reply)
	}
}

func _Logic_BroadcastInRoom0_HTTP_Handler(srv LogicHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BroadcastInRoomReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLogicBroadcastInRoom)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BroadcastInRoom(ctx, req.(*BroadcastInRoomReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BroadcastInRoomReply)
		return ctx.Result(200, reply)
	}
}

type LogicHTTPClient interface {
	Broadcast(ctx context.Context, req *BroadcastReq, opts ...http.CallOption) (rsp *BroadcastReply, err error)
	BroadcastInRoom(ctx context.Context, req *BroadcastInRoomReq, opts ...http.CallOption) (rsp *BroadcastInRoomReply, err error)
	PushMsg(ctx context.Context, req *PushMsgReq, opts ...http.CallOption) (rsp *PushMsgReply, err error)
}

type LogicHTTPClientImpl struct {
	cc *http.Client
}

func NewLogicHTTPClient(client *http.Client) LogicHTTPClient {
	return &LogicHTTPClientImpl{client}
}

func (c *LogicHTTPClientImpl) Broadcast(ctx context.Context, in *BroadcastReq, opts ...http.CallOption) (*BroadcastReply, error) {
	var out BroadcastReply
	pattern := "/msg/all"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLogicBroadcast))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *LogicHTTPClientImpl) BroadcastInRoom(ctx context.Context, in *BroadcastInRoomReq, opts ...http.CallOption) (*BroadcastInRoomReply, error) {
	var out BroadcastInRoomReply
	pattern := "/msg/room"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLogicBroadcastInRoom))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *LogicHTTPClientImpl) PushMsg(ctx context.Context, in *PushMsgReq, opts ...http.CallOption) (*PushMsgReply, error) {
	var out PushMsgReply
	pattern := "/msg/clients"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLogicPushMsg))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
